/*
 * Copyright (C) 2013-2014 Olaf Lessenich
 * Copyright (C) 2014-2015 University of Passau, Germany
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 *
 * Contributors:
 *     Olaf Lessenich <lessenic@fim.uni-passau.de>
 *     Georg Seibt <seibt@fim.uni-passau.de>
 */
import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.operation.BranchAddOp

plugins {
    id 'application'
    id 'eclipse'
    id 'idea'
    id "org.ajoberstar.grgit" version "1.6.0"
    id "com.github.hierynomus.license" version "0.13.1"
    id "com.scuilion.syntastic" version "0.3.8"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javadoc {
    options.setEncoding 'UTF-8'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'res'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'testres'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-io:commons-io:2.5'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.thoughtworks.xstream:xstream:1.4.9'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'de.uni-passau.fim.seibt:kvconfig:1.0'
    compile project(':JNativeMerge')
    compile files('lib/JJ7.jar')
    testCompile 'junit:junit:4.12'
}

task wrapper(type: Wrapper) {
    distributionType "all"
    gradleVersion "3.4"
}

def testFilesDir = new File(rootProject.buildDir, 'jdime-testfiles')

license {
    header rootProject.file('LICENSE_HEADER')
    mapping("fxml", "XML_STYLE")
    strictCheck true

    fileTree(testFilesDir).visit {
        exclude it.getRelativePath().getPathString()
    }

    exclude "de/fosd/jdime/matcher/unordered/assignmentProblem/HungarianAlgorithm.java"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

def loggingConfigFile = file('JDimeLogging.properties')
def configFile = file('JDime.properties')

def loggingOpt = "-Djava.util.logging.config.file=${loggingConfigFile.getName()}"
def defaultOpts = ["-Xmx2048m", "-ea"]

startScripts {
    applicationName = rootProject.name
    mainClassName = "de.fosd.jdime.Main"
    defaultJvmOpts = defaultOpts + loggingOpt
}

task guiScripts(type: CreateStartScripts) {
    applicationName = "${rootProject.name}_GUI"
    mainClassName = 'de.fosd.jdime.gui.GUI'
    defaultJvmOpts = [loggingOpt]
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

distributions.with {
    main.with {
        def binDir = 'bin'

        contents {
            into(binDir) {
                from(guiScripts)
                fileMode = 0755
            }
        }

        contents {
            into binDir, {
                from project.projectDir, {
                    include configFile.name

                    def getHeadCommit = {
                        def grgit = Grgit.open(dir: project.projectDir)
                        def head = grgit.head()

                        grgit.close()
                        head.id
                    }

                    expand([
                            commit: getHeadCommit()
                    ])
                }

                from project.projectDir, {
                    include loggingConfigFile.name
                }
            }
        }
    }
}

installDist {

    if (project.hasProperty('distDir')) {
        destinationDir = file(project.property('distDir'))
    }
}

run {
    main = 'de.fosd.jdime.gui.GUI'
}

test {
    systemProperty "java.util.logging.config.file", loggingConfigFile.getAbsolutePath()
    maxHeapSize = '2048m'
    enableAssertions = true
}

def testFilesBranchName = "feature/external_testcases"

task getTestFiles {
    def gitURI = "https://github.com/se-passau/jdime-testfiles.git"

    description = "Clones (or pulls) the JDime test files repository from GitHub."
    group = 'verification'

    sourceSets {
        test {
            resources {
                srcDir testFilesDir
            }
        }
    }

    outputs.dir(testFilesDir)
    outputs.upToDateWhen {
        if (!testFilesDir.exists()) {
            return false
        }

        def grgit = Grgit.open(dir: testFilesDir)
        grgit.fetch()

        def tfBranch = grgit.resolve.toBranch(testFilesBranchName)

        if (tfBranch == null) {
            grgit.branch.add(name: testFilesBranchName, startPoint: "origin/$testFilesBranchName", mode: BranchAddOp.Mode.TRACK)
        }

        def status = grgit.branch.status(name: testFilesBranchName)
        grgit.close()

        return status.behindCount == 0
    }

    doLast {
        if (testFilesDir.exists()) {
            def grgit = Grgit.open(dir: testFilesDir)

            grgit.checkout(branch: testFilesBranchName)
            grgit.merge(head: "origin/$testFilesBranchName")
            grgit.close()
        } else {
            Grgit.clone(dir: testFilesDir, refToCheckout: testFilesBranchName, uri: gitURI).close()
        }
    }
}

test.dependsOn getTestFiles

compileJava {
    options.compilerArgs << "-Xlint:all"
}
