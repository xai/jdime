/*
 * Copyright (C) 2013-2014 Olaf Lessenich
 * Copyright (C) 2014-2015 University of Passau, Germany
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 *
 * Contributors:
 *     Olaf Lessenich <lessenic@fim.uni-passau.de>
 *     Georg Seibt <seibt@fim.uni-passau.de>
 */
import org.ajoberstar.grgit.Grgit

plugins {
    id 'application'
    id 'eclipse'
    id 'idea'
    id 'org.ajoberstar.grgit' version '1.5.1'
    id "com.github.hierynomus.license" version "0.13.1"
    id "com.scuilion.syntastic" version "0.3.6"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javadoc {
    options.setEncoding 'UTF-8'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'res'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}

repositories {
    mavenCentral()
    maven { // for glpk-java
        name = 'Xypron Release'
        url = 'http://rsync.xypron.de/repository'
    }
}

dependencies {
    compile 'commons-io:commons-io:2.5'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'org.gnu.glpk:glpk-java:1.0.37'
    compile 'com.thoughtworks.xstream:xstream:1.4.9'
    compile 'de.uni-passau.fim.seibt:kvconfig:1.0'
    compile files('lib/JJ7.jar')
    testCompile 'junit:junit:4.12'
}

def testFilesDir = new File(rootProject.buildDir, 'jdime-testfiles')

license {
    header rootProject.file('LICENSE_HEADER')
    mapping("fxml", "XML_STYLE")
    strictCheck true

    fileTree(testFilesDir).visit {
        exclude it.getRelativePath().getPathString()
    }

    exclude "de/fosd/jdime/matcher/unordered/assignmentProblem/HungarianAlgorithm.java"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

def loggingConfigFile = file('JDimeLogging.properties')
def configFile = file('JDime.properties')

def libraryPathOpt = '-Djava.library.path=.'
def loggingOpt = "-Djava.util.logging.config.file=${loggingConfigFile.getName()}"
def defaultOpts = ["-Xmx2048m", "-ea"]
task natives {
    def fail = false;
    def glpk_version = "4_56"
    def glpk_java_prop_name = "glpkJava"
    def glpk_prop_name = "glpk"
    def glpk_java_name
    def glpk_name

    def os = System.getProperty("os.name").toLowerCase()

    if (os.contains("windows")) {
        glpk_java_name = "glpk_${glpk_version}_java.dll"
        glpk_name = "glpk_${glpk_version}.dll"
    } else if (os.contains("mac")) {
        glpk_java_name = "libglpk_java.dylib"
        glpk_name = "libglpk.dylib"
    } else {
        glpk_java_name = "libglpk_java.so"
        glpk_name = "libglpk.so"
    }

    if (!rootProject.hasProperty(glpk_java_prop_name)) {
        println "Provide the path to the $glpk_java_name native library using the $glpk_java_prop_name property."
        fail = true;
    }
    if (!rootProject.hasProperty(glpk_prop_name)) {
        println "Provide the path to the $glpk_name native library using the $glpk_prop_name property."
        fail = true;
    }

    if (fail) {
        throw new InvalidUserDataException("Missing native library paths.");
    }

    def glpkJavaFile = file(rootProject."$glpk_java_prop_name").getAbsoluteFile()
    def glpkFile = file(rootProject."$glpk_prop_name").getAbsoluteFile()

    if (glpkJavaFile.exists()) {
        if (!glpkJavaFile.isFile() || glpkJavaFile.getName() != glpk_java_name) {
            println "$glpkJavaFile is not a file or does not have the correct name. Expecting $glpk_java_name."
            fail = true;
        }
    } else {
        println "$glpkJavaFile does not exist."
        fail = true;
    }

    if (glpkFile.exists()) {
        if (!glpkFile.isFile() || glpkFile.getName() != glpk_name) {
            println "$glpkFile is not a file or does not have the correct name. Expecting $glpk_name."
            fail = true;
        }
    } else {
        println "$glpkFile does not exist."
        fail = true;
    }

    if (fail) {
        throw new InvalidUserDataException("Invalid native libraries.");
    }

    inputs.files(glpkFile, glpkJavaFile)
    outputs.files(glpkFile, glpkJavaFile)
}

startScripts {
    applicationName = rootProject.name
    mainClassName = "de.fosd.jdime.Main"
    defaultJvmOpts = defaultOpts + libraryPathOpt + loggingOpt
}

task guiScripts(type: CreateStartScripts) {
    applicationName = "${rootProject.name}_GUI"
    mainClassName = 'de.fosd.jdime.gui.GUI'
    defaultJvmOpts = [loggingOpt]
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

distributions.with {
    main.with {
        def binDir = 'bin'

        contents {
            into(binDir) {
                from(guiScripts)
                fileMode = 0755
            }
            into(binDir) {
                from(natives)
            }
        }

        contents {
            into binDir, {
                from project.projectDir, {
                    include configFile.name

                    def getHeadCommit = {
                        def grgit = Grgit.open(dir: project.projectDir)
                        def head = grgit.head();

                        grgit.close()
                        head.id
                    }

                    expand([
                            commit: getHeadCommit()
                    ])
                }

                from project.projectDir, {
                    include loggingConfigFile.name
                }

                from(natives)
            }
        }
    }
}

installDist {

    if (project.hasProperty('distDir')) {
        destinationDir = file(project.property('distDir'))
    }
}

run {
    main = 'de.fosd.jdime.gui.GUI'
}

test {
    jvmArgs loggingOpt, libraryPathOpt
    maxHeapSize = '2048m'
    enableAssertions = true
    workingDir new File(installDist.destinationDir, 'bin')
}

task getTestFiles {
    def gitURI = "https://github.com/se-passau/jdime-testfiles.git"

    description = "Clones (or pulls) the JDime test files repository from GitHub."
    group = 'verification'

    sourceSets {
        test {
            resources {
                srcDir testFilesDir
            }
        }
    }

    outputs.dir(testFilesDir)
    outputs.upToDateWhen {
        if (!testFilesDir.exists()) {
            return false;
        }

        def grgit = Grgit.open(dir: testFilesDir)

        grgit.fetch()
        def status = grgit.branch.status(name: 'master')
        grgit.close()

        return status.behindCount == 0
    }

    doLast {
        if (testFilesDir.exists()) {
            def grgit = Grgit.open(dir: testFilesDir)

            grgit.merge(head: 'origin/master')
            grgit.close()
        } else {
            Grgit.clone(dir: testFilesDir, uri: gitURI).close()
        }
    }
}

test.dependsOn getTestFiles

compileJava {
    options.compilerArgs << "-Xlint:all"
}
